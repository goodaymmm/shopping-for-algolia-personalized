name: Build Electron App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact-name: windows
            artifact-path: |
              release/**/*.exe
              release/**/win-unpacked/**
          - os: macos-latest
            platform: mac
            artifact-name: macos
            artifact-path: |
              release/**/*.dmg
              release/**/*.zip
              release/**/mac/**

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    env:
      # Disable interactive prompts in CI
      CI: true
      FORCE_COLOR: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Clean workspace and npm cache
        shell: bash
        run: |
          # Clean up any existing node_modules to avoid permission issues
          rm -rf node_modules || true
          rm -rf ~/.npm || true
          npm cache clean --force || true
          
      - name: Install dependencies with retry
        shell: bash
        run: |
          # First attempt with npm ci
          if ! npm ci; then
            echo "npm ci failed, cleaning and retrying with npm install..."
            rm -rf node_modules package-lock.json
            npm install
          fi

      - name: Ensure Tailwind CSS v3 compatibility
        shell: bash
        run: |
          # Fix postcss.config.js to use standard Tailwind v3 format
          echo "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };" > postcss.config.js
          
          # Verify Tailwind v3 is installed (should already be from npm ci/install)
          npm list tailwindcss || echo "Tailwind CSS not found in dependencies"

      - name: Pre-install electron-builder dependencies
        shell: bash
        run: |
          # Pre-install electron-builder dependencies to avoid download issues during build
          npx electron-builder install-app-deps --arch=x64 || true
      
      - name: Generate Amazon product data
        shell: bash
        run: |
          echo "Generating optimized Amazon product data..."
          # Check if data files already exist (from repository)
          if [ -f "src/data/amazon-products.json" ]; then
            echo "Amazon product data already exists in repository, skipping generation"
            echo "Existing data files:"
            ls -la src/data/ || dir src/data/
          else
            echo "Data files not found in repository, skipping generation for CI build"
            echo "Note: Run 'npm run preprocess-amazon-data' locally with Amazon data to generate files"
            # Create empty data directory for build to succeed
            mkdir -p src/data
            echo "[]" > src/data/amazon-products.json
            echo "[]" > src/data/products-fashion.json
            echo "[]" > src/data/products-electronics.json
            echo "[]" > src/data/products-other.json
          fi
        
      - name: Build TypeScript
        shell: bash
        run: npm run build:all

      - name: Build Electron app (with retry on NSIS failure)
        shell: bash
        run: |
          # First attempt
          if ! npx electron-builder --${{ matrix.platform }}; then
            echo "First build attempt failed, retrying after clearing cache..."
            
            # Clear electron-builder cache
            npx electron-builder install-app-deps --arch=x64 --force || true
            rm -rf node_modules/.cache/electron-builder || true
            
            # Wait and retry
            sleep 10
            echo "Retrying build..."
            npx electron-builder --${{ matrix.platform }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable code signing for macOS in CI
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: List build artifacts
        shell: bash
        run: |
          echo "Contents of release directory:"
          ls -la release/ || echo "No release directory"
          find release -type f -name "*.exe" -o -name "*.AppImage" -o -name "*.dmg" 2>/dev/null || echo "No installers found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-build
          path: ${{ matrix.artifact-path }}
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-build/**/*.exe
            macos-build/**/*.dmg
            macos-build/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}