name: Build Electron App

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win
            artifact-name: windows
            artifact-path: |
              release/**/*.exe
              release/**/win-unpacked/**
              release/**/*.dxt
          - os: macos-latest
            platform: mac
            artifact-name: macos
            artifact-path: |
              release/**/*.dmg
              release/**/*.zip
              release/**/mac/**

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    env:
      # Disable interactive prompts in CI
      CI: true
      FORCE_COLOR: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        shell: bash
        run: |
          # Remove existing node_modules to avoid permission issues
          rm -rf node_modules || true
          
          # Use npm install instead of npm ci for better compatibility
          npm install --no-audit --no-fund

      - name: Ensure Tailwind CSS v3 compatibility
        shell: bash
        run: |
          # Fix postcss.config.js to use standard Tailwind v3 format
          echo "module.exports = { plugins: { tailwindcss: {}, autoprefixer: {} } };" > postcss.config.js
          
          # Verify Tailwind v3 is installed (should already be from npm ci/install)
          npm list tailwindcss || echo "Tailwind CSS not found in dependencies"

      # Removed pre-install electron-builder dependencies step as it may cause issues
      
      - name: Generate Amazon product data
        shell: bash
        run: |
          echo "Generating optimized Amazon product data..."
          # Check if data files already exist (from repository)
          if [ -f "src/data/amazon-products.json" ]; then
            echo "Amazon product data already exists in repository, skipping generation"
            echo "Existing data files:"
            ls -la src/data/ || dir src/data/
          else
            echo "Data files not found in repository, skipping generation for CI build"
            echo "Note: Run 'npm run preprocess-amazon-data' locally with Amazon data to generate files"
            # Create empty data directory for build to succeed
            mkdir -p src/data
            echo "[]" > src/data/amazon-products.json
            echo "[]" > src/data/products-fashion.json
            echo "[]" > src/data/products-electronics.json
            echo "[]" > src/data/products-other.json
          fi
        
      - name: Build TypeScript
        shell: bash
        run: npm run build:all

      - name: Copy MCP server files
        shell: bash
        run: |
          echo "Ensuring MCP server files are in dist..."
          # Copy MCP server scripts to dist
          cp mcp-server.bat dist/ || echo "mcp-server.bat not found"
          cp mcp-server.sh dist/ || echo "mcp-server.sh not found"
          
          # Verify MCP files exist
          echo "MCP files in dist:"
          ls -la dist/mcp-server.* || echo "No MCP server files found"
          ls -la dist/main/mcp-standalone.js || echo "No mcp-standalone.js found"

      - name: Build Electron app
        shell: bash
        run: |
          # Build for the appropriate platform
          npx electron-builder --${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Disable code signing for macOS in CI
          CSC_IDENTITY_AUTO_DISCOVERY: false
          # Electron Builder configuration
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          USE_HARD_LINKS: false

      - name: Build Desktop Extension (.dxt)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "Building Desktop Extension..."
          npm run build:extension
          echo "Desktop Extension build completed"
          
          # Verify .dxt file was created
          if [ -f "release/shopping-for-algolia-personalized.dxt" ]; then
            echo "✓ Desktop Extension created successfully"
            ls -la release/shopping-for-algolia-personalized.dxt
          else
            echo "✗ Desktop Extension not found"
            exit 1
          fi

      - name: List build artifacts
        shell: bash
        run: |
          echo "Contents of release directory:"
          ls -la release/ || echo "No release directory"
          find release -type f -name "*.exe" -o -name "*.AppImage" -o -name "*.dmg" 2>/dev/null || echo "No installers found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}-build
          path: ${{ matrix.artifact-path }}
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            windows-build/**/*.exe
            windows-build/**/*.dxt
            macos-build/**/*.dmg
            macos-build/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}